from aiogram import Bot, Dispatcher, executor, types
from requests_html import HTMLSession

import asyncio
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

import config
import keyboards as kb
import database as db

# Load bot
bot = Bot(token=config.API_KEY)
dp = Dispatcher(bot)

# Parsing
session = HTMLSession()
headers = {'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36'}

# user.id: [–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å–ª–æ–≤–æ, –æ—Å—Ç. –ø–æ–≤—ñ–¥–æ–º. –±–æ—Ç–∞]
temp = {}

@dp.message_handler(commands=['start'], commands_prefix='!/')
async def start_command(message: types.Message):
    print("Start command: ", message.from_user.full_name, message.from_user.username, message.from_id)
    db.new_user(message.from_user)
    msg = await message.answer("–ü—Ä–∏–≤—ñ—Ç–∏–∫!)\n–©–æ —Ö–æ—á–µ—à —Ä–æ–±–∏—Ç–∏?", reply_markup=kb.menu)
    await message.delete()
    new_temp_data(message.from_user)
    if temp[message.from_id]['msg'] is not None:
        await delete_last_msg(message.from_id)
    temp[message.from_id]['msg'] = msg.message_id
@dp.message_handler(commands=['menu'], commands_prefix='!/')
async def menu_command(message: types.Message):
    msg = await message.answer("–©–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–±–∏—Ç–∏?", reply_markup=kb.menu)
    await message.delete()
    new_temp_data(message.from_user)
    if temp[message.from_id]['msg'] is not None:
        await delete_last_msg(message.from_id)
    temp[message.from_id]['msg'] = msg.message_id


async def next_sort(user_id:int):
    word = db.get_word(config.leng_sort_word)
    if word is None:
        await bot.send_message(user_id, f'‚ùå –ü–æ–º–∏–ª–∫–∞!\n–°–ª–æ–≤–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏, —á–∏ —ñ–Ω—à—ñ –ª—é–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–ª–∏ —Å–ª–æ–≤–∞ (/check)', reply_markup=kb.back)
        return
    temp[user_id]['word'] = word
    msg = await bot.send_message(user_id, f'üìù <i>–†–µ–∂–∏–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</i>\n<b>–ß–∏—Ç–∞–π—Ç–µ —É–≤–∞–∂–Ω–æ!</b>\n\n–Ø–∫ —á–∞—Å—Ç–æ –≤–∂–∏–≤–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ <b>"{word}"</b>?', "HTML", reply_markup=kb.sort(word))
    temp[user_id]['msg'] = msg.message_id

async def next_check(user):
    item = db.get_check(user.full_name, temp[user.id]['word'])
    if item is None:
        await bot.send_message(user.id, f'‚ùå –ü–æ–º–∏–ª–∫–∞!\n–°–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ –≤–æ–Ω–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è', reply_markup=kb.check_error)
        return
    temp[user.id]['word'] = item['word']
    freq = ['üü¢ –ß–∞—Å—Ç–æ', 'üü† –†—ñ–¥–∫–æ', 'üî¥ –ù—ñ–∫–æ–ª–∏']
    msg = await bot.send_message(user.id, f'üîé <i>–†–µ–∂–∏–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏</i>\n<b>–ß–∏—Ç–∞–π—Ç–µ —É–≤–∞–∂–Ω–æ!</b>\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <i>{item["user"]}</i> —Å–∫–∞–∑–∞–≤, —â–æ\n\n—Å–ª–æ–≤–æ <b>"{item["word"]}"</b>\n–≤–∂–∏–≤–∞—î—Ç—å—Å—è <b>{freq[item["list"]]}</b>.\n\n–¶–µ –ø—Ä–∞–≤–¥–∞? <i>–Ø–∫—â–æ –Ω—ñ, —Ç–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç</i>', "HTML", reply_markup=kb.check(item["word"], item["list"]))
    temp[user.id]['msg'] = msg.message_id

async def send_stats(user_id:int):
    users = db.get_users()
    all_sort = users["all"]["s0"] + users["all"]["s1"] + users["all"]["s2"]
    all_check = users["all"]["cy"] + users["all"]["cn"]
    text = f'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ª—ñ–≤: {all_sort}</b>\n ‚Äî üü¢ –ß–∞—Å—Ç–æ - <b>{users["all"]["s0"]}</b>\n ‚Äî üü† –†—ñ–¥–∫–æ - <b>{users["all"]["s1"]}</b>\n ‚Äî üî¥ –ù—ñ–∫–æ–ª–∏ - <b>{users["all"]["s2"]}</b>\n\n<b>üîé –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: {all_check}</b>\n ‚Äî ‚úÖ –ö-—Å—Ç—å —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö —Å–ª—ñ–≤ - <b>{users["all"]["cy"]}</b>\n ‚Äî ‚ùå –ù–µ —Å—Ö–≤–∞–ª–µ–Ω–æ <b>{users["all"]["cn"]}</b> —Ä–∞–∑—ñ–≤\n\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:'

    for i in users:
        if i == "all": continue
        u = users[i] # User
        text += f'\n ‚Äî {u["name"]} ({(u["sort"] + u["check"])})\n ‚Ä¢ üìù {u["sort"]} ‚Üí üü¢ {u["s0"]} | üü† {u["s1"]} | üî¥ {u["s2"]}\n ‚Ä¢ üîé {u["check"]} ‚Üí ‚úÖ {u["cy"]} | ‚ùå {u["cn"]}\n'

    msg = await bot.send_message(user_id, text, "HTML", reply_markup=kb.reload("stats"))
    temp[user_id]['word'] = None
    temp[user_id]['msg'] = msg.message_id

async def send_last_actions(user_id:int, full:bool=False):
    if full: keyboard = kb.reload("last")
    else: keyboard = kb.last
    msg = await bot.send_message(user_id, db.get_last_actions(full), reply_markup=keyboard)
    temp[user_id]['word'] = None
    temp[user_id]['msg'] = msg.message_id

@dp.callback_query_handler(lambda callback_query: True)
async def callback(call: types.CallbackQuery):
    new_temp_data(call.from_user)
    match (call.data):
        case 'back':
            msg = await call.message.answer("–©–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–±–∏—Ç–∏?", reply_markup=kb.menu)
            temp[call.from_user.id]['msg'] = msg.message_id
            temp[call.from_user.id]['word'] = None
            
        case 'close': pass
        case 'stats': await send_stats(call.from_user.id)
        case 'last': await send_last_actions(call.from_user.id)
        case 'last_full': await send_last_actions(call.from_user.id, True)

        case "start_sort": await next_sort(call.from_user.id)
        case "start_check": await next_check(call.from_user)

        case _:
            data = call.data.split("_")
            match data[0]:
                case "often":
                    await next_sort(call.from_user.id)
                    await call.message.delete()
                    await call.answer(f"{data[1]} - üü¢ –ß–∞—Å—Ç–æ")
                    await db.sort_word(data[1], 0, call.from_user)
                    db.add_action(f'üìù {call.from_user.full_name} ‚Üí —Å–ª–æ–≤–æ "{data[1]}" –¥–æ üü¢ –ß–∞—Å—Ç–æ')
                case "rarely":
                    await next_sort(call.from_user.id)
                    await call.message.delete()
                    await call.answer(f"{data[1]} - üü† –†—ñ–¥–∫–æ")
                    await db.sort_word(data[1], 1, call.from_user)
                    db.add_action(f'üìù {call.from_user.full_name} ‚Üí —Å–ª–æ–≤–æ "{data[1]}" –¥–æ üü† –†—ñ–¥–∫–æ')
                case "never":
                    await next_sort(call.from_user.id)
                    await call.message.delete()
                    await call.answer(f"{data[1]} - üî¥ –ù—ñ–∫–æ–ª–∏")
                    await db.sort_word(data[1], 2, call.from_user)
                    db.add_action(f'üìù {call.from_user.full_name} ‚Üí —Å–ª–æ–≤–æ "{data[1]}" –¥–æ üî¥ –ù—ñ–∫–æ–ª–∏')
                    
                case "yes":
                    await call.message.delete()
                    await call.answer(f"‚úÖ –°–ª–æ–≤–æ {data[1]} –∑–∞–ø–∏—Å–∞–Ω–æ!")
                    await db.check_yes(data[1], int(data[2]), call.from_user.id)
                    await next_check(call.from_user)
                    db.add_action(f'üîé {call.from_user.full_name} —Å—Ö–≤–∞–ª–∏–≤ —Å–ª–æ–≤–æ "{data[1]}" —É {("üü¢ –ß–∞—Å—Ç–æ", "üü† –†—ñ–¥–∫–æ", "üî¥ –ù—ñ–∫–æ–ª–∏")[int(data[2])]}')
                case "no":
                    await call.message.delete()
                    await call.answer(f'{data[1]} - {("üü¢ –ß–∞—Å—Ç–æ", "üü† –†—ñ–¥–∫–æ", "üî¥ –ù—ñ–∫–æ–ª–∏")[int(data[3])]}')
                    await db.check_no(data[1], int(data[2]), int(data[3]), call.from_user)
                    await next_check(call.from_user)
                    db.add_action(f'üîé {call.from_user.full_name} –≤–≤–∞–∂–∞—î, —â–æ —Å–ª–æ–≤—É "{data[1]}" –º—ñ—Å—Ü–µ —É {("üü¢ –ß–∞—Å—Ç–æ", "üü† –†—ñ–¥–∫–æ", "üî¥ –ù—ñ–∫–æ–ª–∏")[int(data[3])]}, –∞ –Ω–µ –≤ {("üü¢ –ß–∞—Å—Ç–æ", "üü† –†—ñ–¥–∫–æ", "üî¥ –ù—ñ–∫–æ–ª–∏")[int(data[2])]}')

                case "info":
                    await call.message.answer(get_info(data[1]), reply_markup=kb.close)
                    await call.answer()
            return
    
    await call.message.delete()

# –ü–æ–ª—É—á–∏—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–∞ –∑—ñ —Å–∞–π—Ç—É       
def get_info(word:str):
    print(f"- https://slova.com.ua/word/{word}")
    r = session.get(f"https://slova.com.ua/word/{word}", headers=headers)
    defenition = r.html.find(".defenition", first=True)

    if defenition is None: text = f'–Ø –Ω–µ –∑–Ω–∞—é —â–æ –æ–∑–Ω–∞—á–∞—î —Å–ª–æ–≤–æ "{word}"'
    else: 
        text = f'–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–∞ "{word}"\n'
        i = 0
        for el in defenition.find("p", first=False):
            i += 1
            if i == 4: break
            text += f"{el.text}\n\n"
    return text

# Admin Commands
@dp.message_handler(commands=['setmaxleng'], commands_prefix='!/')
async def setmaxleng_command(message: types.Message):
    if message.get_args().isdigit():
        config.leng_sort_word = int(message.get_args())
        await message.answer(f"–†–æ–∑–º—ñ—Ä —Å–ª—ñ–≤ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {config.leng_sort_word}", reply_markup=kb.close)
    else: 
        await message.answer(f"–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –±—É–¥—å –ª–∞—Å–∫–∞", reply_markup=kb.close)
    await message.delete()
@dp.message_handler(commands=['maxleng'], commands_prefix='!/')
async def maxleng_command(message: types.Message):
    await message.answer(f"–†–æ–∑–º—ñ—Ä —Å–ª—ñ–≤ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {config.leng_sort_word}", reply_markup=kb.close)
    await message.delete()
@dp.message_handler(commands=['getusers'], commands_prefix='!/')
async def getusers_command(message: types.Message):
    await message.answer(temp.__str__(), reply_markup=kb.close)
    await message.delete()


@dp.message_handler()
async def msg_handler(message: types.Message):
    print("Get Message")
    if not " " in message.text and not message.text.isnumeric():
        await message.answer(get_info(message.text), reply_markup=kb.close)
    await message.delete()


def new_temp_data(user):
    if not user.id in temp: temp[user.id] = {'name':user.full_name, 'word':None, 'msg':None}

async def delete_last_msg(user_id:int):
    try: await bot.delete_message(user_id, temp[user_id]['msg'])
    except: pass

if __name__ == "__main__":
    print("Bot is running")
    executor.start_polling(dp, skip_updates=True)
